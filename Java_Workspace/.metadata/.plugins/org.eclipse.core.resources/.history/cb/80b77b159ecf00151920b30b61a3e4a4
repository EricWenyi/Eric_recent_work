import edu.princeton.cs.algs4.StdRandom;
import edu.princeton.cs.algs4.StdStats;
import edu.princeton.cs.algs4.WeightedQuickUnionUF;

public class Percolation {
	private int[][] id;
	private int size;
	private int count;
	private int[] sz;
	
	
	public Percolation(int N){// create N-by-N grid, with all sites blocked
		if (N < 0) throw new IllegalArgumentException();
		count = N;
		size = N;
		id = new int[N*N][2];
		for(int i = 0; i < N*N; i++){
			id[i][0] = i;
			id[i][1] = 0;
		}
		
		sz = new int[N];
		for(int i = 0; i < N; i++)
			sz[i] = 1;
			
	}
	
	public void open(int i, int j){// open site (row i, column j) if it is not open already
		if(i > size || j > size || i < 1 || j < 1)
			throw new java.lang.IndexOutOfBoundsException();
		int num = (i - 1) * size + j - 1;
		id[num][1] = 1; 		
	}
	
	public boolean isOpen(int i, int j){ // is site (row i, column j) open?
		int num = (i - 1) * size + j - 1;
		if(id[num][1] == 1)
			return true;
		else
			return false;
	}
	
	public boolean isFull(int i, int j){// is site (row i, column j) full?
		int num = (i - 1) * size + j - 1;
		
	}
	
	public boolean percolates(){// does the system percolate?
		
	}             

	public static void main(String[] args){ // test client (optional)
		
	} 
	
	
}
